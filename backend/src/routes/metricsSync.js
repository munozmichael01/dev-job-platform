/**
 * üìä API Routes para Sincronizaci√≥n de M√©tricas
 * 
 * Endpoints para gestionar el sync de datos reales desde canales externos
 * 
 * @author Claude Code
 * @date 2025-01-17
 */

const express = require('express');
const router = express.Router();
const MetricsSync = require('../services/metricsSync');

// Instancia global del servicio de sync
const metricsSync = new MetricsSync();

/**
 * POST /api/metrics-sync/start
 * Inicia el servicio de sync autom√°tico
 */
router.post('/start', async (req, res) => {
  try {
    console.log('üîÑ Iniciando servicio de sync autom√°tico de m√©tricas');
    
    await metricsSync.startAutomaticSync();
    
    res.json({
      success: true,
      message: 'Servicio de sync autom√°tico iniciado',
      frequency: '5 minutos',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Error iniciando sync autom√°tico:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/metrics-sync/stop
 * Detiene el servicio de sync autom√°tico
 */
router.post('/stop', async (req, res) => {
  try {
    console.log('‚èπÔ∏è Deteniendo servicio de sync autom√°tico');
    
    metricsSync.stopAutomaticSync();
    
    res.json({
      success: true,
      message: 'Servicio de sync autom√°tico detenido',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Error deteniendo sync autom√°tico:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/metrics-sync/sync-all
 * Fuerza sync inmediato de todas las campa√±as activas
 */
router.post('/sync-all', async (req, res) => {
  try {
    console.log('üîÑ Forzando sync de todas las campa√±as activas');
    
    const result = await metricsSync.syncAllCampaignMetrics();
    
    res.json({
      success: true,
      message: 'Sync completo de todas las campa√±as',
      result: result,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Error sync completo:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/metrics-sync/campaign/:campaignId
 * Fuerza sync inmediato de una campa√±a espec√≠fica
 */
router.post('/campaign/:campaignId', async (req, res) => {
  try {
    const { campaignId } = req.params;
    const { userId } = req.body; // Usuario desde el body o auth

    console.log(`üîÑ Forzando sync campa√±a ${campaignId}`);
    
    const result = await metricsSync.forceSyncCampaign(
      parseInt(campaignId), 
      userId || 1 // Default user para testing
    );
    
    res.json({
      success: true,
      message: `Sync completado para campa√±a ${campaignId}`,
      result: result,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error(`‚ùå Error sync campa√±a ${req.params.campaignId}:`, error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      campaignId: req.params.campaignId
    });
  }
});

/**
 * GET /api/metrics-sync/campaign/:campaignId/metrics
 * Obtiene las m√©tricas actuales de una campa√±a
 */
router.get('/campaign/:campaignId/metrics', async (req, res) => {
  try {
    const { campaignId } = req.params;
    
    console.log(`üìä Obteniendo m√©tricas campa√±a ${campaignId}`);
    
    const metrics = await metricsSync.getCurrentMetrics(parseInt(campaignId));
    
    if (!metrics) {
      return res.status(404).json({
        success: false,
        error: 'Campa√±a no encontrada'
      });
    }
    
    res.json({
      success: true,
      campaignId: parseInt(campaignId),
      metrics: metrics,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error(`‚ùå Error obteniendo m√©tricas campa√±a ${req.params.campaignId}:`, error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      campaignId: req.params.campaignId
    });
  }
});

/**
 * GET /api/metrics-sync/status
 * Obtiene el estado del servicio de sync
 */
router.get('/status', async (req, res) => {
  try {
    const status = {
      isRunning: metricsSync.isRunning,
      syncInterval: metricsSync.syncIntervalMinutes,
      lastSyncStatus: 'Available via individual campaign endpoints',
      uptime: process.uptime(),
      timestamp: new Date().toISOString()
    };
    
    res.json({
      success: true,
      status: status
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo estado sync:', error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/metrics-sync/demo-metrics/:campaignId
 * Genera m√©tricas demo para testing (desarrollo)
 */
router.post('/demo-metrics/:campaignId', async (req, res) => {
  try {
    const { campaignId } = req.params;
    const { channelId = 'jooble' } = req.body;
    
    console.log(`üéÆ Generando m√©tricas demo para campa√±a ${campaignId}, canal ${channelId}`);
    
    await metricsSync.generateDemoMetrics(parseInt(campaignId), channelId);
    
    // Obtener m√©tricas actualizadas
    const metrics = await metricsSync.getCurrentMetrics(parseInt(campaignId));
    
    res.json({
      success: true,
      message: 'M√©tricas demo generadas',
      campaignId: parseInt(campaignId),
      channelId: channelId,
      metrics: metrics,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error(`‚ùå Error generando m√©tricas demo:`, error.message);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;